#! /usr/bin/env bash

######################################################################
# Used to perform simple “git checkout” operations.
######################################################################


function print_help {
    local name_for_doc
    
    name_for_doc=$(printf '%q' "$(basename "$0")")
    
    cat << _HELP_

  “git checkout” helper.

  Usage:

    ${name_for_doc} [-s] [BRANCH]
    ${name_for_doc} -h

  If BRANCH is given, this will place yourself on a local BRANCH branch.
  If this branch does not exist, it is created and set to track
  origin/BRANCH.
  This is especially useful to start testing a coworker's work while
  reviewing a pull request: just get the “foo/bar” name of the PR's branch
  and run “${name_for_doc} foo/bar”.

  If no BRANCH is given, current existing local branches are displayed
  and the user is prompted to choose the one he wishes to go to.

  The “origin” name is actually obtained through the “gorigin” function.
  Adaptations might be needed if you work with several remote repositories.

  By default, this script discards uncomitted changes when switching to a branch
  (it first performs a checkout of the last commit of the current branch).
  This can be avoided by using the “-s” (“soft”) option.

_HELP_
}


# Fill the “target” variable with the name of an existing local branch.
function choose_local_target {
    local local_branches
    local line
    
    # Place local branches in an indexed array.
    local_branches=()
    while read -r line
    do
        local_branches+=("$line")
    done < <(
        git branch --list | sed 's/^[* ] //'
    )
    
    echo "Choose a target branch:"
    
    select target in "${local_branches[@]}"
    do
        if [ "$target" ]
        then
            break
        fi
    done
}


# This needs the “soft” variable to be set (or unset,
# according to the user's wishes).
#
# $1    Prompt to ask if the user is ready to give up his changes.
function reset_if_not_soft {
    if [ -z "$soft" ]
    then
        read -p "${1:-Give up changes?}"
        git checkout -q . || exit
    fi
}


# Exits with 0 status iff the provided branch name can be found in one
# of the available servers.
#
# $1    A branch name, like “feature/foo”.
function branch_exists_in_a_remote {
    test "$(
        git ls-remote --heads | grep -v '^From ' \
                | awk '$2 == "refs/heads/'"${1:?No branch name given.}"'"'
    )"
}

###############################

unset -v soft

OPTIND=1
while getopts 'hs' opt
do
    case "$opt" in
        h)
            print_help
            exit 0
            ;;
        s)
            soft=1
            ;;
        *)
            exit 1
            ;;
    esac
done
shift $((OPTIND - 1))


target=$1
    
if ! [ "$target" ]
then
    choose_local_target
fi

echo 'Fetching info...'
git fetch -pq || exit

unset -v command
command=(git checkout)

# Does the branch exist locally?
if git show-ref --verify --quiet refs/heads/"$target"
then
    # Existing branch. Simple branch switch.
    reset_if_not_soft "Abandon changes and go to existing branch “$target”? Ctrl-C to cancel."
    command+=("$target")
else
    # Non-existing branch.
    echo 'Checking distant branches...'
    # Let us see if the branch exists in the remote server.
    if branch_exists_in_a_remote "$target"
    then
        origin=$(gorigin)
        : ${origin:?Could not get origin name.}
        reset_if_not_soft "Abandon changes and go to “$target”? Ctrl-C to cancel."
        command+=(
            -b "$target"
            "$origin"/"$target"
        )
    else
        printf '%s: Could not find a remote “%q” branch.\n' \
                "$(basename "$0")" "$target" >&2
        exit 1
    fi
fi

printf 'Running: '
printf ' %q' "${command[@]}"
echo
"${command[@]}" &&
printf '%s: Done.\n' "$(basename "$0")"
